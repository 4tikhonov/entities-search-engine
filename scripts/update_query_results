#!/usr/bin/env coffee
{ exec } = require 'child_process'
callOneByOne = require './lib/call_one_by_one'
wdsparql = "./node_modules/wikidata-cli/bin/wdsparql -s"
sparqlFolder = './queries/sparql'
types = require('./lib/types_parser')(sparqlFolder, 'rq')
fs = require 'fs'
_ = require '../lib/utils'

filePath = (type)-> "./queries/results/#{type}.json"

archive = (type)->
  file = filePath type
  try
    { mtime } = fs.statSync file
    timestamp = mtime.toISOString().replace(':', '-').split(':')[0]
    renamed = file.replace '.json', ".#{timestamp}.json"
    # Ignore ENOENT errors
    return "[ -e #{file} ] && mv #{file} #{renamed} 2> /dev/null"
  catch err
    console.log err.message
    return "echo 'no file archived'"

update = (type)->
  "#{wdsparql} #{sparqlFolder}/#{type}.rq > ./queries/results/#{type}.json"

makeQuery = (type)->
  return new Promise (resolve, reject)->
    updateCmd = "#{update(type)}"
    _.info updateCmd, 'running'
    cmd = "#{archive(type)} ; #{updateCmd}"
    exec cmd, (err, res)->
      if err then reject err
      else resolve res

callOneByOne types, 'query update', makeQuery
.then -> _.success types, 'query updates done'
.catch (err)-> _.error [ types, err ], 'query updates err'
